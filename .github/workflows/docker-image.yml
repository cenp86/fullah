name: PUSH_AH_MAMBU_TO_INFRA_ECR_MEX

on:
  push:
    branches: 
      - "main"
    paths:
      - 'UalaAccounting/UalaAccounting.api/**'
  workflow_dispatch: # Permite ejecutar el workflow manualmente desde la interfaz de GitHub Actions      


env:
  ECR_REPOSITORY: testecr
  AWS_DEFAULT_REGION: us-east-1
  
jobs:
  build:
    name: 'PUSH_AH_MAMBU_TO_INFRA_ECR_MEX'
    runs-on: ubuntu-latest

    permissions:
          id-token: write
          contents: read

    steps:
      
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2 
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'
          
      # Check if the ECS service is running
      - name: Check if ECS service is running
        id: check-service
        run: |
          service_status=$(aws ecs describe-services --cluster ${{ vars.ECS_CLUSTER }} --services ${{ vars.ECS_SERVICE }} --query "services[0].status" --output text)
          if [ "$service_status" != "ACTIVE" ]; then
            echo "ECS service is not running. Will not redeploy container."
            echo steps.check-service.outcome
            exit 1
          fi
          
      - name: Build, tag, and push image to Amazon ECR
        id: build-push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker buildx build --platform linux/arm64 --build-arg TENANT=uala -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f UalaAccounting/UalaAccounting.api/Dockerfile --provenance=false --push .
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
          
      - name: Download task definition
        if: steps.check-service.outcome == 'success'
        run: |
          aws ecs describe-task-definition --task-definition ${{ vars.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json
  
      - name: Fill in the new image ID in the Amazon ECS task definition
        if: steps.check-service.outcome == 'success'
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ vars.CONTAINER_NAME }}
          image: ${{ steps.build-push.outputs.image }}
  
      - name: Deploy Amazon ECS task definition
        if: steps.check-service.outcome == 'success'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ vars.ECS_SERVICE }}
          cluster: ${{ vars.ECS_CLUSTER }}
          wait-for-service-stability: true          
